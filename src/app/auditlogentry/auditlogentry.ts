// src/app/utils/audit-logger-setdoc.ts

// Import necessary Firestore functions
import { Firestore, collection, doc, setDoc } from '@angular/fire/firestore';

/**
 * Interface for the structure of an audit log entry when using setDoc.
 * This ensures the data matches what you intend to save.
 */
export interface AuditLogEntrySetDoc {
  actorUid: string;
  action: string; // Describes the action performed (e.g., "user_login", "searched_user", "task_created")
  resource: string; // The specific entity or resource affected (e.g., "user_ID", "task_ID", "organization_ID")
  status: 'success' | 'failed' | 'no_data'; // Outcome of the action
  timestampIST: string; // Human-readable timestamp in Indian Standard Time (REQUIRED)
}

/**
 * Logs an audit action to the 'auditlogs' Firestore collection using `setDoc`.
 * Each log entry will have a unique ID based on the timestamp.
 * This is a standalone, non-blocking function, handling its own Promise internally.
 *
 * @param firestoreInstance The initialized Firestore instance from your Angular application.
 * You'll inject Firestore into your component/service and pass it here.
 * @param actorUid The User ID (UID) of the person or system performing the action.
 * @param action A concise string describing the action (e.g., "viewed_report", "deleted_record").
 * @param resource The identifier of the resource the action was performed on (e.g., "report_123", "record_xyz").
 * @param status The outcome of the action: 'success', 'failed', or 'no_data'.
 * @param organizationId Optional. The ID of the organization context.
 * @param additionalDetails Optional. An object for any extra key-value pairs to log.
 */
export function logAuditActionWithSetDoc(
  firestoreInstance: Firestore,
  actorUid: string | '',
  action: string,
  resource: string,
  status: 'success' | 'failed' | 'no_data'
): void {
  try {
    // Get the current date and time to format for IST
    const now = new Date();
    console.log("entered audit fn");

    // Format the timestamp to Indian Standard Time (IST - UTC+5:30)
    const timestampIST = now.toLocaleString('en-IN', {
      timeZone: 'Asia/Kolkata', // Explicitly set the timezone to IST
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false, // Use 24-hour format
    });

    // Generate a unique document ID based on the current timestamp (milliseconds since epoch)
    const uniqueLogId = `log_${Date.now()}`;

    // Construct the audit log entry object
    const auditLogEntry: AuditLogEntrySetDoc = {
      actorUid,
      action,
      resource,
      status,
      timestampIST: timestampIST, // Only IST timestamp is included
    };

    // Get a document reference with the generated unique ID within the 'auditlogs' collection

    let orgId = localStorage.getItem('orgId');
    console.log(auditLogEntry);
    const auditLogsCollectionRef = collection(
      firestoreInstance,
      `organizations/${orgId}/auditlogs`
    ); // <-- Changed path
    const auditLogRef = doc(auditLogsCollectionRef, uniqueLogId);

    // Use setDoc to write the audit log entry. This operation will create a new document
    // with the specified ID if it doesn't exist, or overwrite it if it does (though IDs
    // generated by Date.now() should always be unique in practice for logging).
    setDoc(auditLogRef, auditLogEntry)
      .then(() => {
        // Log success to the console once the setDoc Promise resolves
        console.log(
          `[Audit Log] Action "${action}" by "${actorUid}" on "${resource}" logged as "${status}" with ID: ${uniqueLogId}.`
        );
      })
      .catch((error: any) => {
        // Log any errors that occur during the Firestore write operation
        console.error(
          `[Audit Log Error] Failed to log action "${action}" for "${actorUid}" with ID ${uniqueLogId}:`,
          error
        );
      });
  } catch (error: any) {
    // This catch block handles synchronous errors that might occur
    // before the setDoc operation is even initiated (e.g., issues with date formatting).
    console.error(
      `[Audit Log Error] Synchronous error preparing log for "${action}" for "${actorUid}":`,
      error
    );
  }
}
